class FeedbackPage extends StatefulWidget {
  const FeedbackPage({Key? key}) : super(key: key);

  @override
  _FeedbackPageState createState() => _FeedbackPageState();
}

class _FeedbackPageState extends State<FeedbackPage> {
  final TextEditingController feedbackController = TextEditingController();
  bool isSubmitting = false;

  // Submit Feedback
  Future<void> _submitFeedback() async {
    if (feedbackController.text.isNotEmpty) {
      setState(() {
        isSubmitting = true;
      });

      try {
        // Get the current user from Firebase Authentication
        User? user = FirebaseAuth.instance.currentUser;

        if (user == null) {
          // Handle case where the user is not logged in
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text("Please log in to submit feedback")),
          );
          return;
        }

        // Save feedback to Firestore along with the username
        await FirebaseFirestore.instance.collection('feedback').add({
          'feedback': feedbackController.text,
          'username': user.displayName ?? user.email ?? 'Anonymous', // Use displayName or email
          'timestamp': FieldValue.serverTimestamp(),
        });

        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text("Feedback Submitted!")),
        );

        // Clear the feedback field
        feedbackController.clear();
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("Error: $e")),
        );
      } finally {
        setState(() {
          isSubmitting = false;
        });
      }
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("Please provide your feedback")),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Feedback"),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              "We value your feedback!",
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 20),
            TextField(
              controller: feedbackController,
              maxLines: 5,
              decoration: const InputDecoration(
                hintText: "Enter your feedback here",
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 20),
            SizedBox(
              width: double.infinity,
              child: ElevatedButton(
                onPressed: isSubmitting ? null : _submitFeedback,
                child: isSubmitting
                    ? const CircularProgressIndicator(color: Colors.white)
                    : const Text("Submit Feedback"),
              ),
            ),
          ],
        ),
      ),
    );
  }
}